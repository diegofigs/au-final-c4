// Generated by @wagmi/cli@1.0.0 on 5/18/2023 at 10:32:27 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ConnectFour
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const connectFourABI = [
  { stateMutability: 'payable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'GameFinished' },
  { type: 'error', inputs: [], name: 'InvalidMove' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'challenger',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'challenged',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GameProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'winner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GameWon',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'mover',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'row', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'MovePerformed',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'opponent', internalType: 'address', type: 'address' }],
    name: 'challenge',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'side', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'didPlayerWin',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'getBoards',
    outputs: [
      { name: '', internalType: 'uint64', type: 'uint64' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getGame',
    outputs: [
      { name: 'player1', internalType: 'address', type: 'address' },
      { name: 'player2', internalType: 'address', type: 'address' },
      { name: 'moves', internalType: 'uint8', type: 'uint8' },
      { name: 'finished', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'row', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'makeMove',
    outputs: [],
  },
] as const

/**
 *
 */
export const connectFourAddress = {
  0: '0xF998c96805E884226d52fe5752B57F4A6FDecAec',
} as const

/**
 *
 */
export const connectFourConfig = {
  address: connectFourAddress,
  abi: connectFourABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link connectFourABI}__.
 *
 *
 */
export function useConnectFourRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof connectFourABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractRead({
    abi: connectFourABI,
    address: connectFourAddress[0],
    ...config,
  } as UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link connectFourABI}__ and `functionName` set to `"didPlayerWin"`.
 *
 *
 */
export function useConnectFourDidPlayerWin<
  TFunctionName extends 'didPlayerWin',
  TSelectData = ReadContractResult<typeof connectFourABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractRead({
    abi: connectFourABI,
    address: connectFourAddress[0],
    functionName: 'didPlayerWin',
    ...config,
  } as UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link connectFourABI}__ and `functionName` set to `"getBoards"`.
 *
 *
 */
export function useConnectFourGetBoards<
  TFunctionName extends 'getBoards',
  TSelectData = ReadContractResult<typeof connectFourABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractRead({
    abi: connectFourABI,
    address: connectFourAddress[0],
    functionName: 'getBoards',
    ...config,
  } as UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link connectFourABI}__ and `functionName` set to `"getGame"`.
 *
 *
 */
export function useConnectFourGetGame<
  TFunctionName extends 'getGame',
  TSelectData = ReadContractResult<typeof connectFourABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractRead({
    abi: connectFourABI,
    address: connectFourAddress[0],
    functionName: 'getGame',
    ...config,
  } as UseContractReadConfig<typeof connectFourABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link connectFourABI}__.
 *
 *
 */
export function useConnectFourWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof connectFourAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof connectFourABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof connectFourABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof connectFourABI, TFunctionName, TMode>({
    abi: connectFourABI,
    address: connectFourAddress[0],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link connectFourABI}__ and `functionName` set to `"challenge"`.
 *
 *
 */
export function useConnectFourChallenge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof connectFourAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof connectFourABI,
          'challenge'
        >['request']['abi'],
        'challenge',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'challenge' }
    : UseContractWriteConfig<typeof connectFourABI, 'challenge', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'challenge'
      } = {} as any,
) {
  return useContractWrite<typeof connectFourABI, 'challenge', TMode>({
    abi: connectFourABI,
    address: connectFourAddress[0],
    functionName: 'challenge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link connectFourABI}__ and `functionName` set to `"makeMove"`.
 *
 *
 */
export function useConnectFourMakeMove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof connectFourAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof connectFourABI,
          'makeMove'
        >['request']['abi'],
        'makeMove',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'makeMove' }
    : UseContractWriteConfig<typeof connectFourABI, 'makeMove', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'makeMove'
      } = {} as any,
) {
  return useContractWrite<typeof connectFourABI, 'makeMove', TMode>({
    abi: connectFourABI,
    address: connectFourAddress[0],
    functionName: 'makeMove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link connectFourABI}__.
 *
 *
 */
export function usePrepareConnectFourWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof connectFourABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: connectFourABI,
    address: connectFourAddress[0],
    ...config,
  } as UsePrepareContractWriteConfig<typeof connectFourABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link connectFourABI}__ and `functionName` set to `"challenge"`.
 *
 *
 */
export function usePrepareConnectFourChallenge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof connectFourABI, 'challenge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: connectFourABI,
    address: connectFourAddress[0],
    functionName: 'challenge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof connectFourABI, 'challenge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link connectFourABI}__ and `functionName` set to `"makeMove"`.
 *
 *
 */
export function usePrepareConnectFourMakeMove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof connectFourABI, 'makeMove'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: connectFourABI,
    address: connectFourAddress[0],
    functionName: 'makeMove',
    ...config,
  } as UsePrepareContractWriteConfig<typeof connectFourABI, 'makeMove'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link connectFourABI}__.
 *
 *
 */
export function useConnectFourEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof connectFourABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractEvent({
    abi: connectFourABI,
    address: connectFourAddress[0],
    ...config,
  } as UseContractEventConfig<typeof connectFourABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link connectFourABI}__ and `eventName` set to `"GameProposed"`.
 *
 *
 */
export function useConnectFourGameProposedEvent(
  config: Omit<
    UseContractEventConfig<typeof connectFourABI, 'GameProposed'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractEvent({
    abi: connectFourABI,
    address: connectFourAddress[0],
    eventName: 'GameProposed',
    ...config,
  } as UseContractEventConfig<typeof connectFourABI, 'GameProposed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link connectFourABI}__ and `eventName` set to `"GameWon"`.
 *
 *
 */
export function useConnectFourGameWonEvent(
  config: Omit<
    UseContractEventConfig<typeof connectFourABI, 'GameWon'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractEvent({
    abi: connectFourABI,
    address: connectFourAddress[0],
    eventName: 'GameWon',
    ...config,
  } as UseContractEventConfig<typeof connectFourABI, 'GameWon'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link connectFourABI}__ and `eventName` set to `"MovePerformed"`.
 *
 *
 */
export function useConnectFourMovePerformedEvent(
  config: Omit<
    UseContractEventConfig<typeof connectFourABI, 'MovePerformed'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof connectFourAddress } = {} as any,
) {
  return useContractEvent({
    abi: connectFourABI,
    address: connectFourAddress[0],
    eventName: 'MovePerformed',
    ...config,
  } as UseContractEventConfig<typeof connectFourABI, 'MovePerformed'>)
}
